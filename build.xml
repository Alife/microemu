<!-- This is temporary build system -->
<!-- Migration to the maven is planned --> 

<project name="microemu-mod" default="detectFile" basedir=".">
    
    <!-- IMPORTANT TO SET WITH VALID VALUES --> 

    <property name="midlet.jar" value="opera-mini-4.21.33.jar" /> 
    <property name="midlet.package" value="Mini.apk" />
    <property name="midlet.jar" value="opera-mini-4.21.33.jar" /> 
	<property name="old_package_name" value="com.opera.mini.mod422" /><!-- 工程中的包名-->
    <property name="new_package_name" value="org.microemu.android." /><!-- 新的包名 -->
		
    <property name="sdk-folder" value="/mnt/app/android-sdk-linux_x86" />
	<property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-3" />

	<property name="library" value="${basedir}/libs" />
	<property name="outdir" value="${basedir}/bin" />
	<property name="outdir-gen" value="${basedir}/gen" />
    <!-- Output directories -->
    <property name="outdir-assets" value="${outdir}/assets" />
    <property name="outdir-classes" value="${outdir}/classes" />
    <property name="outdir-res" value="${outdir}/res" />
    <property name="outdir-libs" value="${outdir}/libs" />

    <!-- dex files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />
    <property name="dex-path" value="${outdir}/${dex-file}" />
    <!-- The final package file to generate -->
    <!-- <property name="out-package" value="${outdir}/${midlet.package}" /> -->

    <!-- Tools -->
    <property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" />
	
	<condition property="aapt" value="${sdk-platform-tools}/aapt" else="${sdk-platform-folder}/tools/aapt">
		<available file="${sdk-platform-tools}" type="dir" />
	</condition>
	
	<condition property="adb" value="${sdk-platform-tools}/adb" else="${sdk-folder}/tools/adb">
		<available file="${sdk-platform-tools}" type="dir" />
	</condition>
    
	<condition property="dx" value="${sdk-platform-tools}/dx.bat">
		<and>
        	<os family="windows"/>
			<available file="${sdk-platform-tools}" type="dir" />
		</and>
    </condition>
    <condition property="dx" value="${sdk-platform-folder}/tools/dx.bat">
    	<and>
        	<os family="windows"/>
    		<not>
    			<available file="${sdk-platform-tools}" type="dir" />
    		</not>
    	</and>
    </condition>	
    <condition property="dx" value="${sdk-platform-tools}/dx">
    	<and>
	    	<not>
	        	<os family="windows"/>
	    	</not>
    		<available file="${sdk-platform-tools}" type="dir" />
    	</and>
    </condition>	
    <condition property="dx" value="${sdk-platform-folder}/tools/dx">
    	<and>
	    	<not>
	        	<os family="windows"/>
	    	</not>
    		<not>
    			<available file="${sdk-platform-tools}" type="dir" />
    		</not>
    	</and>
    </condition>	
	
	<condition property="apk-builder" value="${sdk-folder}/tools/apkbuilder.bat" else="${sdk-folder}/tools/apkbuilder" >
        <os family="windows"/>
    </condition>
	
    <property name="android-jar" value="android-8.jar" />
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	    <classpath>
	        <pathelement location="${env.ANT_HOME}/lib/ant-contrib-1.0b3.jar" />
	    </classpath>
	</taskdef>
	
	<macrodef name="loadjad">
        <attribute name="jad"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <loadproperties srcFile="@{jad}">
                <filterchain>
                    <prefixlines prefix="@{prefix}"/>
                </filterchain>
            </loadproperties>
        </sequential>		
    </macrodef>

    <target name="clean">
        <delete dir="${outdir}" />
        <delete dir="${outdir-gen}" />
    </target>

    <target name="dirs">
        <mkdir dir="${outdir}" />
        <mkdir dir="${outdir-assets}" />
        <mkdir dir="${outdir-classes}" />
        <!-- <mkdir dir="${outdir-res}" /> -->
        <mkdir dir="${outdir-gen}" />
        <!-- <mkdir dir="${outdir-libs}" /> -->
    </target>
    	
    <target name="read-jad">
        <unzip src="${midlet.jar}" dest="${outdir-assets}">
            <patternset>
                <include name="META-INF/MANIFEST.MF"/>
    	        <include name="${midlet.icon}"/>
    	    </patternset>
        </unzip>
        <move file="${outdir-assets}/META-INF/MANIFEST.MF" tofile="${outdir-assets}/MANIFEST.jad" />
        <!-- <exec executable="native2ascii" failonerror="true">
            <arg value="-encoding" />
            <arg value="GBK" />
            <arg value="${outdir-assets}/META-INF/MANIFEST.MF" />
            <arg value="${outdir-assets}/MANIFEST.jad" />
        </exec> -->
        <loadjad jad="${outdir-assets}/MANIFEST.jad" prefix="jad."/>
    	
        <basename file="${outdir-assets}/MANIFEST.jad" property="midlet.jad.basename"/>
    	
        <propertyregex property="midlet.name" 
                input="${jad.MIDlet-1}"
                regexp="([^,]+),([^,]+),([^,]+)"
                select="\1" />

    	<echo>midlet.name = [${midlet.name}]</echo>

    	<fail unless="midlet.name" message="No midlet name defined in jad."/><!--if MIDlet-1: ,[ICON],[CLASS] notice the NO [TITLE] -->

        <propertyregex property="midlet.icon.totrim" 
                input="${jad.MIDlet-1}"
                regexp="([^,]+),([^,]+),([^,]+)"
                select="\2" />

    	<echo>midlet.icon.totrim = [${midlet.icon.totrim}]</echo>

    	<fail unless="midlet.icon.totrim" message="No icon defined in jad."/><!--if MIDlet-1: [TITLE],,[CLASS] notice the NO space in the [ICON] placeholder -->

        <propertyregex property="midlet.icon" 
                input="${midlet.icon.totrim}"
                regexp="^[ \t]+|[ \t]+$"
                replace=""
    	        defaultValue="${midlet.icon.totrim}" /><!-- if nothing to trim-->

    	<echo>midlet.icon = [${midlet.icon}]</echo>

    	<condition property="NotHasIcon">
    	  <equals arg1="${midlet.icon}" arg2=""/>
    	</condition>
    	<fail if="NotHasIcon" message="No valid icon set in jad."/> <!--if MIDlet-1: [TITLE], ,[CLASS] notice the space in the [ICON] placeholder -->

        <propertyregex property="midlet.class.totrim" 
                input="${jad.MIDlet-1}"
                regexp="([^,]+),([^,]+),([^,]+)"
                select="\3" />

    	<echo>midlet.class.totrim = [${midlet.class.totrim}]</echo>

        <propertyregex property="midlet.class" 
                input="${midlet.class.totrim}"
                regexp="^[ \t]+|[ \t]+$"
                replace=""
    	        defaultValue="${midlet.class.totrim}" />    	
    	<echo>midlet.class = ${midlet.class}</echo>
	</target>

    <target name="replaceregexp">
	<!--这里会把工程下面的一些需要处理的文件，都复制到temp里 -->
    	<echo>copy src gen AndroidManifest.xml to bin/</echo>
		<copy todir="${outdir}">
			<fileset dir="${basedir}" includes="**/src/**"/>
			<fileset dir="${basedir}" includes="**/gen/**"/>
			<fileset dir="${basedir}" includes="**/res/**"/>
			<!-- <fileset dir="${basedir}" includes="*.*"/> -->
			<fileset dir="${basedir}" includes="AndroidManifest.xml"/>
		</copy>
    	<echo>replace package name ${outdir}/AndroidManifest.xml</echo>
    	<echo>import(.*)${old_package_name}.R => import ${new_package_name}${midlet.class}.R</echo>
		<replaceregexp flags="g" encoding="UTF-8" byline="true">
			<regexp pattern="package(.*)${old_package_name}"/>
			<substitution expression="package=&quot;${new_package_name}${midlet.class}"/>
			<fileset dir="${outdir}" includes="AndroidManifest.xml"/>
		</replaceregexp>	 
    	<echo>replace package name ${outdir}/src/*</echo>
		<replaceregexp flags="g" encoding="UTF-8" byline="true">
			<regexp pattern="import(.*)${old_package_name}.R"/>
			<substitution expression="import ${new_package_name}${midlet.class}.R"/>
			<fileset dir="${outdir}/src" includes="**/*.java"/>
			<fileset dir="${outdir}/src" includes="*.java"/>
		</replaceregexp>
    </target>

    <target name="compile" depends="dirs,read-jad,replaceregexp,package-res">
		<echo>${outdir-gen}</echo>
		<javac target="1.5" debug="true" extdirs=""
                srcdir="${outdir}/src"
                destdir="${outdir-classes}"
                bootclasspath="${android-jar}">
			<!--给编译器指定编码，防止出现："警告： 编码 GBK 的不可映射字符"-->
			<compilerarg line="-encoding UTF-8"/>
  			<src path="${outdir-gen}" />
			<classpath>
                <fileset dir="${library}" includes="*.jar" /><!-- 第三方jar包需要引用，用于辅助编译 -->
            </classpath>
        </javac>
    </target>

    <target name="dex" depends="compile">
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--output=${dex-path}" />
            <arg value="--positions=lines" />
            <arg path="${outdir-classes}" />
            <arg value="${library}" /> <!-- 把libs下所有jar打包 -->
            <arg value="${midlet.jar}" />
        </exec>
    </target>
    
    <target name="prepare-assets" depends="read-jad">
        <unzip src="${midlet.jar}"
               dest="${outdir-assets}">
            <patternset>
                <exclude name="**/*.class"/>
                <exclude name="**/META-INF"/>
                <exclude name="**/MANIFEST.MF"/>
            </patternset>
        </unzip>
    </target>
    
    <target name="prepare-res" depends="read-jad">
        <mkdir dir="${outdir-res}/values" />
        <echo file="${outdir-res}/values/strings.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;string name="app_name"&gt;${midlet.name}&lt;/string&gt;
    &lt;string name="class_name"&gt;${midlet.class}&lt;/string&gt;
    &lt;string name="jad_name"&gt;${midlet.jad.basename}&lt;/string&gt;
&lt;/resources&gt;
        </echo>
        
        <mkdir dir="${outdir-res}/drawable" />
    	<!-- <unjar src="${midlet.jar}" dest="${outdir}/assets/">
    	    <patternset>
    	        <include name="${midlet.icon}"/>
    	    </patternset>
    	</unjar> -->
		<copy todir="${outdir}">
			<fileset dir="${outdir-assets}" includes="*.*"/>
			<fileset dir="${outdir-assets}" includes="*"/>
		</copy>
        <copy file="${outdir}/assets/${midlet.icon}" tofile="${outdir-res}/drawable/app_icon.png" />
        
        <!-- <echo file="${outdir}/AndroidManifest.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.microemu.android.${midlet.class}"&gt;
    &lt;uses-permission android:name="android.permission.INTERNET" /&gt; 
    &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt;
    &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
    &lt;uses-permission android:name="android.permission.VIBRATE" /&gt; 
    &lt;uses-sdk android:minSdkVersion="3" android:targetSdkVersion="8"/&gt;
    &lt;application android:label="@string/app_name" android:icon="@drawable/app_icon"&gt;
        &lt;activity 
                android:name="org.microemu.android.MicroEmulator"
                android:theme="@android:style/Theme"
                android:windowSoftInputMode="adjustResize"
                android:configChanges="orientation|keyboardHidden"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;
                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
&lt;/manifest&gt;            
        </echo> -->
    </target>
    
    <target name="package-res" depends="prepare-assets, prepare-res">
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
			<arg value="-m" /><!--m,J,gen表示创建包名的目录和R.java到gen目录下 -->
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${outdir}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${outdir-res}" />
            <arg value="-A" />
            <arg value="${outdir-assets}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${out-package}.res" />
        </exec>
    </target>
	
	<target name="detectFile">   
		<!-- <property name="jarFileIsExists" value="false" />
		<property name="apkFileIsExists" value="false" /> -->
		<propertyregex property="out-package" input="${midlet.jar}" regexp='.jar' replace=".apk"/>
		<condition property="apkFileIsExists"   >   
			<and><available file="${out-package}"/></and>   
		</condition> 
		<condition property="jarFileIsExists"   >   
			<and><available file="${midlet.jar}"/></and>   
		</condition> 
        <echo>${out-package} ${apkFileIsExists}</echo>
        <echo>${midlet.jar} ${jarFileIsExists}</echo>
        <antcall target="apkFileIsExistsTrue"></antcall>        
        <antcall target="apkFileIsExistsFalse"></antcall>        
     </target>
     <target name="apkFileIsExistsTrue" if="apkFileIsExists" >
        <echo>${out-package} already exists</echo>
     </target>
     <target name="apkFileIsExistsFalse" unless="apkFileIsExists" >
        <antcall target="jarFileIsExistsTrue" />
        <antcall target="jarFileIsExistsFalse" />
     </target>
     <target name="jarFileIsExistsTrue" if="jarFileIsExists" >
        <antcall target="package-apk" />
     </target>
     <target name="jarFileIsExistsFalse" unless="jarFileIsExists" >
        <echo>${midlet.jar} not exists</echo>
     </target>

    <target name="package-apk" depends="clean, dex, package-res">
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-package}" />
            <!-- <arg value="-u" /> -->
            <arg value="-z" />
            <arg value="${out-package}.res" />
            <arg value="-f" />
            <arg value="${dex-path}" />
        </exec>
        <delete file="${out-package}.res" />
    </target>
    
    <!-- Install the package on the default emulator -->
    <target name="install" depends="package-apk">
        <echo>Installing ${out-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>

        
</project>
